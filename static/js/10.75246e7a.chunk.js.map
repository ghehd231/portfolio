{"version":3,"sources":["lib/styles/palette.js","components/common/ListScroll.js","components/common/Section.js","components/common/StackItem.js","components/home/project/Project.js","components/home/project/ProjectSection.js"],"names":["palette","black","white","gray","text_gray","main","sub","button","bgWhite","bgBlack","bgGray","bgDarkGray","bgRed","red","List","vertical","scroll","content","Component","component","scrollRef","useRef","useState","hasScroll","setHasScroll","leftLocation","setLeftLocation","useEffect","resizeWindow","window","addEventListener","removeEventListener","useCallback","hasHorizontalScrollbar","current","scrollWidth","clientWidth","onScroll","scrollLeft","onClick","e","left","scrollTo","top","scrollTop","behavior","SkillListBlock","ref","MoveButton","map","item","id","styled","props","css","div","React","memo","Section","title","SectionWrap","SectionBlock","SectionTitleBox","Title","ListScroll","section","StackItem","stack","Stack","span","Project","ProjectItem","to","ImageBox","img","thumbnail","MetaBox","TypeText","type","SubText","summary","StackContainer","index","Link","ProjectSection","state","useProjectState"],"mappings":"kGAmBeA,IAnBC,CACdC,MAAO,UACPC,MAAO,UACPC,KAAM,UACNC,UAAW,UACXC,KAAM,UACNC,IAAK,UACLC,OAAQ,CACNC,QAAS,UACTC,QAAS,UACTC,OAAQ,UACRC,WAAY,gBACZC,MAAO,yBACPX,MAAO,UACPC,MAAO,UACPC,KAAM,UACNU,IAAK,sB,k+CCXT,IAAMC,EAAO,SAAC,GAAyD,IAAvDC,EAAsD,EAAtDA,SAAUC,EAA4C,EAA5CA,OAAQC,EAAoC,EAApCA,QAAoBC,EAAgB,EAA3BC,UACnCC,EAAYC,iBAAO,MAD2C,EAElCC,qBAFkC,mBAE7DC,EAF6D,KAElDC,EAFkD,OAI5BF,oBAAS,GAJmB,mBAI7DG,EAJ6D,KAI/CC,EAJ+C,KAMpEC,qBACE,WAGE,OAFAC,IACAC,OAAOC,iBAAiB,SAAUF,GAC3B,kBAAMC,OAAOE,oBAAoB,SAAUH,MAEpD,CAACL,IAGH,IAAMK,EAAeI,uBAAY,WAC/B,IAAMC,EAAyBb,EAAUc,QAAQC,YAAcf,EAAUc,QAAQE,YACjFZ,EAAaS,KACZ,IAEGI,EAAWL,uBAAY,WACM,IAAjCZ,EAAUc,QAAQI,WAAmBZ,GAAgB,GAASA,GAAgB,KAC7E,IACGa,EAAUP,uBAAY,SAAAQ,GAC1B,IAAMC,EAAOhB,EAAe,EAAIL,EAAUc,QAAQC,YAClDf,EAAUc,QAAQQ,SAAS,CACzBC,IAAKd,OAAOe,UACZH,KAAMA,EACNI,SAAU,WAEZnB,GAAiBD,KAChB,IAEH,OACE,eAACqB,EAAD,CAAgBC,IAAK3B,EAAWL,SAAUA,EAAUC,OAAQA,EAAQqB,SAAUA,EAA9E,UACGd,GACC,cAACyB,EAAD,CAAYP,KAAMhB,EAAcc,QAASA,EAAzC,SACGd,EAAe,cAAC,IAAD,IAAuB,cAAC,IAAD,MAE1CR,GAAWA,EAAQgC,KAAI,SAAAC,GAAI,OAAI,cAAChC,EAAD,CAAyBgC,KAAMA,GAAfA,EAAKC,WAKrDH,EAAaI,IAAO7C,OAAV,IAMAP,IAAQE,MAEbF,IAAQG,MAOf,SAAAkD,GAAK,OACLA,EAAMZ,MACNa,YADA,QAUER,EAAiBM,IAAOG,IAAV,KAIhB,SAAAF,GAAK,OACLA,EAAMtC,UACNuC,YADA,QAsBA,SAAAD,GAAK,OACLA,EAAMrC,QACNsC,YADA,QAOWE,MAAMC,KAAK3C,G,mtCCzG1B,IAAM4C,EAAU,SAAC,GAAqE,IAAnEC,EAAkE,EAAlEA,MAAOrD,EAA2D,EAA3DA,IAAKU,EAAsD,EAAtDA,OAAQD,EAA8C,EAA9CA,SAAqBG,EAAyB,EAApCC,UAAsBF,EAAc,EAAdA,QACrE,OACE,cAAC2C,EAAD,UACE,eAACC,EAAD,CAAcvD,IAAKA,EAAnB,UACE,cAACwD,EAAD,CAAiBxD,IAAKA,EAAtB,SACE,cAACyD,EAAD,CAAOzD,IAAKA,EAAZ,SACGqD,MAGL,cAACK,EAAD,CAAYhD,OAAQA,EAAQC,QAASA,EAASE,UAAWD,EAAWH,SAAUA,UAMhF6C,EAAcR,IAAOa,QAAV,IAEDjE,IAAQC,OAIlB4D,EAAeT,IAAOG,IAAV,IAMFvD,IAAQC,OAEpB,SAAAoD,GAAK,OACLA,EAAM/C,KACNgD,YADA,QAQEQ,EAAkBV,IAAOG,IAAV,KAKjB,SAAAF,GAAK,OACLA,EAAM/C,KACNgD,YADA,QAQES,EAAQX,IAAOG,IAAV,IACAvD,IAAQE,OAIf,SAAAmD,GAAK,OACLA,EAAM/C,KACNgD,YADA,QASWE,QAAMC,KAAKC,I,uVCnE1B,IAAMQ,EAAY,SAAC,GAAe,IAAbC,EAAY,EAAZA,MACnB,OACE,cAACC,EAAD,UACGD,KAIDC,EAAQhB,IAAOiB,KAAV,IACWrE,IAAQG,KAKdH,IAAQO,OAAOI,WACpBX,IAAQO,OAAOM,KAGX2C,QAAMC,KAAKS,I,utEChB1B,IAAMI,EAAU,SAAC,GAAc,IAAZpB,EAAW,EAAXA,KACjB,OACE,eAACqB,EAAD,CAAaC,GAAE,kBAAatB,EAAKC,IAAjC,UACE,cAACsB,EAAD,CAAUC,IAAKxB,EAAKyB,YAGpB,eAACC,EAAD,WACE,eAACC,EAAD,WACG3B,EAAK4B,KADR,cAGA,cAACf,EAAD,UACGb,EAAKS,QAER,cAACoB,EAAD,UACG7B,EAAK8B,UAGR,cAACC,EAAD,UACG/B,EAAKiB,MAAMlB,KAAI,SAACkB,EAAOe,GAAR,OAAkB,cAAChB,EAAA,EAAD,CAAuBC,MAAOA,GAAde,eAOtDX,EAAcnB,YAAO+B,IAAP/B,CAAH,IAKNpD,IAAQE,OAwBbuE,EAAWrB,IAAOG,IAAV,KAYE,SAAAF,GAAK,qBAAYA,EAAMqB,IAAlB,SAUfG,EAAWzB,IAAOiB,KAAV,IACHrE,IAAQE,OAQb6D,EAAQX,IAAOG,IAAV,IAEAvD,IAAQE,OAMb0E,EAAUxB,IAAOG,IAAV,KAOPwB,EAAU3B,IAAOiB,KAAV,IAEFrE,IAAQI,WAQb6E,EAAiB7B,IAAOG,IAAV,KAYLC,MAAMC,KAAKa,GC3HpBc,EAAiB,WACrB,IAAMC,EAAQC,cACd,OAAO,cAAC5B,EAAA,EAAD,CAASC,MAAM,WAAWxC,UAAWmD,EAASrD,QAASoE,KAGjD7B,cAAMC,KAAK2B","file":"static/js/10.75246e7a.chunk.js","sourcesContent":["const palette = {\n  black: '#000000',\n  white: '#FFFFFF',\n  gray: '#222222',\n  text_gray: '#AAAAAA',\n  main: '#A87BE0',\n  sub: '#BB86FC',\n  button: {\n    bgWhite: '#FFFFFF',\n    bgBlack: '#000000',\n    bgGray: '#AAAAAA',\n    bgDarkGray: 'rgb(34,34,34)',\n    bgRed: 'rgba(221, 0, 129, 0.2)',\n    black: '#000000',\n    white: '#FFFFFF',\n    gray: '#AAAAAA',\n    red: 'rgb(236, 93, 92)',\n  },\n};\nexport default palette;\n","import React, { useEffect, useRef, useState, useCallback } from 'react';\nimport styled, { css } from 'styled-components';\nimport palette from '../../lib/styles/palette';\nimport { RiArrowLeftSLine, RiArrowRightSLine } from 'react-icons/ri';\n\nconst List = ({ vertical, scroll, content, component: Component }) => {\n  const scrollRef = useRef(null);\n  const [hasScroll, setHasScroll] = useState();\n  // const [scrollHeight, setScrollHeight] = useState();\n  const [leftLocation, setLeftLocation] = useState(false);\n\n  useEffect(\n    () => {\n      resizeWindow();\n      window.addEventListener('resize', resizeWindow);\n      return () => window.removeEventListener('resize', resizeWindow);\n    },\n    [hasScroll],\n  );\n\n  const resizeWindow = useCallback(() => {\n    const hasHorizontalScrollbar = scrollRef.current.scrollWidth > scrollRef.current.clientWidth;\n    setHasScroll(hasHorizontalScrollbar);\n  }, []);\n\n  const onScroll = useCallback(() => {\n    scrollRef.current.scrollLeft === 0 ? setLeftLocation(false) : setLeftLocation(true);\n  }, []);\n  const onClick = useCallback(e => {\n    const left = leftLocation ? 0 : scrollRef.current.scrollWidth;\n    scrollRef.current.scrollTo({\n      top: window.scrollTop,\n      left: left,\n      behavior: 'smooth',\n    });\n    setLeftLocation(!leftLocation);\n  }, []);\n\n  return (\n    <SkillListBlock ref={scrollRef} vertical={vertical} scroll={scroll} onScroll={onScroll}>\n      {hasScroll &&\n        <MoveButton left={leftLocation} onClick={onClick}>\n          {leftLocation ? <RiArrowLeftSLine /> : <RiArrowRightSLine />}\n        </MoveButton>}\n      {content && content.map(item => <Component key={item.id} item={item} />)}\n    </SkillListBlock>\n  );\n};\n\nconst MoveButton = styled.button`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  padding: 0.5rem;\n  border-radius: 50%;\n  background: ${palette.white};\n  cursor: pointer;\n  color: ${palette.gray};\n  align-self: center;\n  outline: 0;\n  border: 0;\n  position: absolute;\n  font-size: 1.5rem;\n  right: -0.1rem;\n  ${props =>\n    props.left &&\n    css`\n      right: unset;\n      left: -0.1rem;\n    `};\n  @media only screen and (max-width: 1200px) {\n    display: none;\n  }\n`;\n\nconst SkillListBlock = styled.div`\n  display: flex;\n  justify-content: flex-start;\n  flex-wrap: wrap;\n  ${props =>\n    props.vertical &&\n    css`\n      flex-direction: column;\n    `} overflow-x: auto;\n  padding-bottom: 1rem;\n  &::-webkit-scrollbar {\n    /* visibility: hidden; */\n    width: 0px;\n  }\n  @media only screen and (max-width: 1200px) {\n    &::-webkit-scrollbar {\n      /* width: 4px;\n      height: 4px;\n      border-radius: 6px;\n      background: rgba(255, 255, 255, 0.2); */\n      width: 0px;\n    }\n    &::-webkit-scrollbar-thumb {\n      /* background-color: rgba(255, 255, 255, 0.3);\n      border-radius: 6px; */\n    }\n  }\n  ${props =>\n    props.scroll &&\n    css`\n    overflow-x: auto;\n    flex-wrap: nowrap;\n  `};\n`;\n\nexport default React.memo(List);\n","import React from 'react';\nimport styled, { css } from 'styled-components';\nimport palette from '../../lib/styles/palette';\nimport ListScroll from './ListScroll';\n\nconst Section = ({ title, sub, scroll, vertical, component: Component, content }) => {\n  return (\n    <SectionWrap>\n      <SectionBlock sub={sub}>\n        <SectionTitleBox sub={sub}>\n          <Title sub={sub}>\n            {title}\n          </Title>\n        </SectionTitleBox>\n        <ListScroll scroll={scroll} content={content} component={Component} vertical={vertical} />\n      </SectionBlock>\n    </SectionWrap>\n  );\n};\n\nconst SectionWrap = styled.section`\n  width: 100%;\n  background: ${palette.black};\n  z-index: 100;\n`;\n\nconst SectionBlock = styled.div`\n  position: relative;\n  padding: 3rem 1rem;\n  max-width: 70rem;\n  width: 100%;\n  margin: 0 auto;\n  background: ${palette.black};\n  z-index: 100;\n  ${props =>\n    props.sub &&\n    css`\n      padding: 2rem 1rem;\n    `} @media only screen and (max-width: 480px) {\n    padding: 2rem 1rem;\n  }\n`;\n\nconst SectionTitleBox = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 1rem;\n  ${props =>\n    props.sub &&\n    css`\n      margin-bottom: 0.5rem;\n    `} @media only screen and (max-width: 480px) {\n    margin-bottom: 0.5rem;\n  }\n`;\n\nconst Title = styled.div`\n  color: ${palette.white};\n  font-size: 2.2rem;\n  font-weight: 600;\n  margin-bottom: 1rem;\n  ${props =>\n    props.sub &&\n    css`\n      font-size: 1.8rem;\n    `} @media only screen and (max-width: 480px) {\n    font-size: 1.8rem;\n    margin-bottom: 0;\n  }\n`;\n\nexport default React.memo(Section);\n","import React from 'react';\nimport styled from 'styled-components';\n\nimport palette from '../../lib/styles/palette';\n\nconst StackItem = ({ stack }) => {\n  return (\n    <Stack>\n      {stack}\n    </Stack>\n  );\n};\nconst Stack = styled.span`\n  border: 1px solid ${palette.gray};\n  border-radius: 4px;\n  padding: 0.1rem 0.3rem;\n  margin: 0 0.2rem 0.2rem 0;\n  word-break: break-all;\n  background: ${palette.button.bgDarkGray};\n  color: ${palette.button.red};\n  font-size: 0.8rem;\n`;\nexport default React.memo(StackItem);\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport styled from 'styled-components';\nimport palette from '../../../lib/styles/palette';\nimport StackItem from '../../common/StackItem';\n\nconst Project = ({ item }) => {\n  return (\n    <ProjectItem to={`/detail/${item.id}`}>\n      <ImageBox img={item.thumbnail}>\n        {/* <img src={`../images/project/thumb/${item.thumbnail}.png`} alt=\"project thumbnail\" /> */}\n      </ImageBox>\n      <MetaBox>\n        <TypeText>\n          {item.type} project\n        </TypeText>\n        <Title>\n          {item.title}\n        </Title>\n        <SubText>\n          {item.summary}\n        </SubText>\n\n        <StackContainer>\n          {item.stack.map((stack, index) => <StackItem key={index} stack={stack} />)}\n        </StackContainer>\n      </MetaBox>\n    </ProjectItem>\n  );\n};\n\nconst ProjectItem = styled(Link)`\n  display: flex;\n  flex-direction: column;\n  align-items: flex-start;\n  width: calc(100% / 4);\n  color: ${palette.white};\n  cursor: pointer;\n  padding: 1rem;\n  \n  @media only screen and (max-width: 1200px) {\n    /* width: 32%; */\n    width: calc(100% / 3);\n  }\n  @media only screen and (max-width: 850px) {\n    /* width: 48%; */\n    width: calc(100% / 2);\n  }\n  @media only screen and (max-width: 600px) {\n    width: 100%;\n    flex-direction: row;\n    padding: 1rem 0;\n    height: 11rem;\n    margin-left: 0;\n    \n  }\n  \n  \n`;\n\nconst ImageBox = styled.div`\n  margin-bottom: 0.5rem;\n  width: 100%;\n  height: 10rem;\n  border-radius: 10px;\n  overflow: hidden;\n  /* & > img {\n    width: 100%;\n    height: 100%;\n    min-width: 210px;\n    min-height: 140px;\n  } */\n  background: ${props => `url(\"${props.img}\")`};\n  background-size: cover;\n  background-position: top;\n  background-repeat: no-repeat;\n  @media only screen and (max-width: 600px) {\n    flex: 1;\n    height: 100%;\n  }\n`;\n\nconst TypeText = styled.span`\n  color: ${palette.white};\n  font-size: 0.8rem;\n  @media only screen and (max-width: 480px) {\n    font-size: 1rem;\n    margin: 0.1rem 0 0.3rem;\n  }\n`;\n\nconst Title = styled.div`\n  font-size: 1.5rem;\n  color: ${palette.white};\n  font-weight: 600;\n  align-items: center;\n  margin: 0.1rem 0 0.5rem;\n`;\n\nconst MetaBox = styled.div`\n  @media only screen and (max-width: 600px) {\n    width: 60%;\n    margin-left: 1rem;\n  }\n`;\n\nconst SubText = styled.span`\n  font-size: 1rem;\n  color: ${palette.text_gray};\n  word-break: keep-all;\n  margin-bottom: 0.2rem;\n  @media only screen and (max-width: 480px) {\n    font-size: 0.9rem;\n  }\n`;\n\nconst StackContainer = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  @media only screen and (max-width: 480px) {\n    max-height: 9vh;\n    overflow: scroll;\n    /* &::-webkit-scrollbar {\n      width: 0px;\n    } */\n  }\n`;\n\nexport default React.memo(Project);\n","import React from 'react';\nimport { useProjectState } from '../../../contexts/projects';\nimport Section from '../../common/Section';\nimport Project from './Project';\n\nconst ProjectSection = () => {\n  const state = useProjectState();\n  return <Section title=\"Projects\" component={Project} content={state} />;\n};\n\nexport default React.memo(ProjectSection);\n"],"sourceRoot":""}